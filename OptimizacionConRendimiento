/*
 * Equipo: S.O. AGREVAL
 * Fecha: 06/11/2024
 * Version: 1.2
 * Programa que optimiza el rendimiento del sistema de archivos
 *
 * Este programa realiza las siguientes operaciones para ilustrar la optimización del rendimiento en sistemas de archivos:
 * 1. Crea múltiples archivos y escribe datos en ellos, simulando una carga de trabajo intensa de escritura.
 * 2. Lee los archivos usando hilos para simular la lectura en paralelo, mejorando el rendimiento sin bloquear el programa.
 * 3. Finalmente, elimina los archivos creados, limpiando el sistema de manera ordenada.
 *
 * Las técnicas implementadas en este programa reflejan estrategias de optimización de sistemas de archivos, como:
 * - Escritura en bloques de datos para minimizar el número de llamadas al sistema y mejorar el rendimiento.
 * - Uso de hilos para evitar bloqueos, permitiendo que otras tareas se ejecuten en paralelo durante la lectura de archivos.
 * - Limpieza eficiente de archivos creados para mantener un entorno controlado y evitar la acumulación de archivos innecesarios.
 *
 * Bibliotecas utilizadas:
 * - string.h: Para operaciones de manipulación de cadenas, como memset y strcpy.
 * - fcntl.h: Para operaciones de control de archivos, como open y close, necesarias en la gestión de archivos.
 * - unistd.h: Para la interfaz del sistema UNIX, como close y write.
 * - sys/types.h y sys/stat.h: Para manejar tipos de datos especiales y permisos de archivos.
 * - errno.h: Para la gestión de errores del sistema, permitiendo detectar y responder a fallos.
 * - pthread.h: Para crear y manejar hilos que permiten ejecutar funciones en paralelo, mejorando la concurrencia.
 * - time.h: Para generar datos aleatorios y medir tiempos de ejecución.
 *
 */

#include <stdio.h>      // Manejo básico de entrada y salida: printf, perror
#include <stdlib.h>     // Utilidades generales: malloc, srand, rand
#include <string.h>     // Manipulación de cadenas: memset, strcpy
#include <fcntl.h>      // Operaciones de control de archivos: open, close
#include <unistd.h>     // Interfaz del sistema UNIX: close, write, read
#include <sys/types.h>  // Definición de tipos de datos especiales
#include <sys/stat.h>   // Manejo de permisos de archivos
#include <errno.h>      // Gestión de errores del sistema: perror, errno
#include <pthread.h>    // Manejo de hilos POSIX: pthread_create, pthread_join
#include <time.h>       // Generación de números aleatorios y manejo de tiempo: time, srand

#define NUM_FILES 10            // Número de archivos a crear y manejar
#define FILE_SIZE 1024 * 1024    // Tamaño de cada archivo en bytes (1 MB)
#define BUFFER_SIZE 4096         // Tamaño del buffer para operaciones de lectura y escritura (4 KB)

void generate_data(char *buffer, size_t size) {
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    for (size_t i = 0; i < size; i++) {
        buffer[i] = charset[rand() % (sizeof(charset) - 1)];
    }
}

// Función que crea y escribe en múltiples archivos
void create_and_write_files() {
    char filename[20];
    char buffer[BUFFER_SIZE];
    generate_data(buffer, BUFFER_SIZE);

    for (int i = 0; i < NUM_FILES; i++) {
        snprintf(filename, sizeof(filename), "file_%d.txt", i);
        int fd = open(filename, O_CREAT | O_WRONLY, 0666);
        if (fd == -1) {
            perror("Error al crear archivo");
            continue;
        }

        for (int j = 0; j < FILE_SIZE / BUFFER_SIZE; j++) {
            if (write(fd, buffer, BUFFER_SIZE) == -1) {
                perror("Error al escribir en archivo");
                break;
            }
        }
        close(fd);
    }
}

// Función que cada hilo usará para leer un archivo
void *threaded_read(void *arg) {
    char *filename = (char *)arg; // El nombre del archivo es el argumento de la función
    char buffer[BUFFER_SIZE];     // Buffer para almacenar los datos leídos
    int fd = open(filename, O_RDONLY);
    if (fd == -1) {
        perror("Error al abrir archivo para lectura");
        pthread_exit(NULL); // Terminamos el hilo si ocurre un error
    }

    // Leemos el archivo en bloques hasta el final
    while (read(fd, buffer, BUFFER_SIZE) > 0) {
        // No se realiza ninguna operación con los datos leídos, solo simulamos la lectura
    }
    close(fd);
    pthread_exit(NULL); // Terminamos el hilo de forma segura
}

// Función para realizar lectura de archivos en paralelo usando hilos
void parallel_read_files() {
    pthread_t threads[NUM_FILES]; // Arreglo para almacenar los identificadores de los hilos
    char filename[NUM_FILES][20]; // Arreglo de nombres de archivos

    // Creamos un hilo para cada archivo y realizamos la lectura
    for (int i = 0; i < NUM_FILES; i++) {
        snprintf(filename[i], sizeof(filename[i]), "file_%d.txt", i);
        if (pthread_create(&threads[i], NULL, threaded_read, filename[i]) != 0) {
            perror("Error al crear hilo");
        }
    }

    // Esperamos a que todos los hilos terminen
    for (int i = 0; i < NUM_FILES; i++) {
        pthread_join(threads[i], NULL); // Esperamos a que el hilo i termine
    }
}

// Función para eliminar los archivos generados
void delete_files() {
    char filename[20];
    for (int i = 0; i < NUM_FILES; i++) {
        snprintf(filename, sizeof(filename), "file_%d.txt", i);
        if (remove(filename) == -1) {
            perror("Error al eliminar archivo");
        }
    }
}

// Función principal que coordina todas las operaciones
int main() {
    srand(time(NULL)); // Inicialización de la semilla para generar datos aleatorios

    printf("Creando y escribiendo archivos...\n");
    create_and_write_files(); // Llama a la función para crear y escribir archivos

    printf("Leyendo archivos en paralelo usando hilos...\n");
    parallel_read_files(); // Llama a la función para leer archivos de forma concurrente con hilos

    printf("Eliminando archivos...\n");
    delete_files(); // Llama a la función para eliminar archivos

    printf("Proceso completo.\n");
    return 0; // Fin del programa
}
